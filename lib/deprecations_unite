#! /usr/bin/env elixir

Mix.install([{:poison, "~> 5.0.0"}])

defmodule DeprecationsUnite do
  @moduledoc """
  The one module to rule them all.
  """

  @doc """
  Creates a `deprecations.json`

  ## Examples

      iex> DeprecationsUnite.hello()
      :world

  """
  def merge([]), do: IO.puts("No files found")
  def merge(file_names) do
    deprecations = Enum.map(file_names, fn path -> read_file(path) end)
    |> Enum.map(fn json_string -> Poison.decode!(json_string) end)
    |> Enum.reduce(fn deprecation_map, all_deprecations_map -> Map.merge(all_deprecations_map, deprecation_map) end)
    |> Poison.encode!(pretty: true)

    File.write("deprecations.json", deprecations)
  end

  def read_file(path) do
    case File.read(path) do
      {:ok, contents} -> contents
      {:error, _} -> "{\n  \"message\": \"Unable to read file\"\n}"
    end
  end
end

{valid_args, invalid_args, _} = System.argv()
|> OptionParser.parse(strict: [path: :string])

case invalid_args do
  [] ->
    file_names = Keyword.get(valid_args, :path) |> Path.wildcard()
    DeprecationsUnite.merge(file_names)
  _ -> IO.puts "Invalid argument"
end

